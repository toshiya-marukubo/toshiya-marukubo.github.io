"use strict";function _classCallCheck(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}function _defineProperties(a,b){for(var c,d=0;d<b.length;d++)c=b[d],c.enumerable=c.enumerable||!1,c.configurable=!0,"value"in c&&(c.writable=!0),Object.defineProperty(a,c.key,c)}function _createClass(a,b,c){return b&&_defineProperties(a.prototype,b),c&&_defineProperties(a,c),Object.defineProperty(a,"prototype",{writable:!1}),a}var vertexShader="\nuniform float uTime;\nvarying vec2 vUv;\nfloat PI = 3.14159265359;\n\nfloat random (vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\nvoid main(){\n  vec3 pos = position;\n  \n  float o = tan(pos.y * (mod(uTime, 2.0) * PI / 180.0) - uTime) * tan(uTime) * 0.01 * mod(uTime, 10.0) * random(pos.xy);\n  \n  vUv = uv;\n  \n  gl_Position = projectionMatrix * modelViewMatrix * vec4(pos.x, pos.y + o, pos.z, 1.0);\n}\n",fragmentShader="\nuniform sampler2D uImage;\nuniform float uTime;\nvarying vec2 vUv;\n\nfloat random (vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\nvoid main () {  \n  vec2 offset = random(vUv) * vec2(0.05, 0.0);\n  \n  vec2 split = vec2(2.0, 4.0);\n  \n  vec2 uv = fract(vUv * split + vec2(uTime, 0.0));\n  \n  if (vUv.y < 0.75) {\n    uv = fract(vUv * split + vec2(-uTime - 0.25, 0.0));\n  }\n  \n  if (vUv.y < 0.5) {\n    uv = fract(vUv * split + vec2(+uTime + 0.5, 0.0));\n  }\n  \n  if (vUv.y < 0.25) {\n    uv = fract(vUv * split + vec2(-uTime - 0.75, 0.0));\n  }\n  \n  // Referred to https://codepen.io/bokoko33/pen/vYmWjOB?editors=0010\n  // Thank you so much.\n  float r = texture2D(uImage, uv + offset).r;\n  float g = texture2D(uImage, uv + offset * 0.5).g;\n  float b = texture2D(uImage, uv).b;\n  \n  vec4 texture = vec4(r, g, b, 1.0);\n  \n  gl_FragColor = texture;\n}\n",Mouse=function(){function a(b){_classCallCheck(this,a),this.sketch=b,this.initialize()}return _createClass(a,[{key:"initialize",value:function initialize(){this.delta=0,this.mouse=new THREE.Vector3,this.setupEvents()}},{key:"setupEvents",value:function setupEvents(){window.addEventListener("scroll",this.onScroll.bind(this),!1),window.addEventListener("mousemove",this.onMousemove.bind(this),!1),window.addEventListener("touchmove",this.onTouchmove.bind(this),!1)}},{key:"onScroll",value:function onScroll(){var a=window.pageYOffset,b=document.body.scrollHeight-window.innerHeight;this.delta=a/b}},{key:"onMousemove",value:function onMousemove(a){this.mouse.x=2*(a.clientX/window.innerWidth)-1,this.mouse.y=2*-(a.clientY/window.innerHeight)+1,this.mouse.z=0}},{key:"onTouchmove",value:function onTouchmove(a){var b=a.targetTouches[0];this.mouse.x=2*(b.pageX/window.innerWidth)-1,this.mouse.y=2*-(b.pageY/window.innerHeight)+1,this.mouse.z=0}}]),a}(),Sketch=function(){function a(){_classCallCheck(this,a),this.createCanvas(),this.setupEvents(),this.time=new THREE.Clock(!0),this.mouse=new Mouse(this),this.initialize()}return _createClass(a,[{key:"createCanvas",value:function createCanvas(){this.renderer=new THREE.WebGLRenderer({antialias:!0,alpha:!0}),document.body.appendChild(this.renderer.domElement)}},{key:"setupEvents",value:function setupEvents(){window.addEventListener("resize",this.onResize.bind(this),!1)}},{key:"onResize",value:function onResize(){this.preWidth===window.innerWidth&&480>window.innerWidth||this.initialize()}},{key:"initialize",value:function initialize(){this.animationId&&cancelAnimationFrame(this.animationId),this.preWidth=this.width=Math.ceil(window.innerWidth),this.height=Math.ceil(window.innerHeight),this.scene=new THREE.Scene,this.setupCanvas(),this.setupCamera(),this.setupLight(),this.setupShape(),this.draw()}},{key:"setupCanvas",value:function setupCanvas(){this.renderer.setSize(this.width,this.height),this.renderer.setPixelRatio(window.devicePixelRatio),this.renderer.setClearColor("#000000",1),this.renderer.domElement.style.position="fixed",this.renderer.domElement.style.top="0",this.renderer.domElement.style.left="0",this.renderer.domElement.style.width="100%",this.renderer.domElement.style.height="100%",this.renderer.domElement.style.zIndex="-1",this.renderer.domElement.style.outline="none"}},{key:"setupCamera",value:function setupCamera(){var a=35*(Math.PI/180);this.dist=this.height/2/Math.tan(a),this.camera=new THREE.PerspectiveCamera(70,this.width/this.height,.01,10*this.dist),this.cameraV=new THREE.Vector3,this.cameraP=new THREE.Vector3(this.dist,0,this.dist),this.camera.position.set(this.cameraP),this.camera.lookAt(new THREE.Vector3),this.scene.add(this.camera)}},{key:"updateCamera",value:function updateCamera(){this.cameraV.subVectors(this.mouse.mouse,this.cameraP).multiplyScalar(.05),this.cameraP.add(this.cameraV),this.camera.position.set(2*(this.cameraP.x*this.dist),Math.max(this.cameraP.y*this.dist,this.sphereSize),this.dist),this.camera.lookAt(new THREE.Vector3)}},{key:"setupLight",value:function setupLight(){this.directionalLight=new THREE.DirectionalLight(16777215),this.scene.add(this.directionalLight),this.spotLight=new THREE.SpotLight(16777215),this.spotLight.position.set(0,0,this.dist),this.spotLightV=new THREE.Vector3,this.spotLightP=new THREE.Vector3,this.scene.add(this.spotLight)}},{key:"updateLight",value:function updateLight(){this.spotLightV.subVectors(this.mouse.mouse,this.spotLightP).multiplyScalar(.05),this.spotLightP.add(this.spotLightV),this.spotLight.position.set(this.spotLightP.x*this.dist,Math.max(this.spotLightP.y*this.dist,50),this.dist),this.spotLight.lookAt(new THREE.Vector3)}},{key:"setupShape",value:function setupShape(){this.setupSize(),this.shape=new Shape(this,0,this.sphereSize,0,this.sphereSize,this.groundSize)}},{key:"setupSize",value:function setupSize(){this.sphereSize=null,this.groundSize=Math.max(this.width,this.height),768>=this.width&&(this.sphereSize=120),768<=this.width&&(this.sphereSize=150)}},{key:"draw",value:function draw(){var a=this.time.getElapsedTime();this.shape.render(a),this.updateCamera(a),this.renderer.render(this.scene,this.camera),this.animationId=requestAnimationFrame(this.draw.bind(this))}}]),a}(),Shape=function(){function a(b,c,d,e,f,g){_classCallCheck(this,a),this.sketch=b,this.position=new THREE.Vector3(c,d,e),this.sphereSize=f,this.groundSize=g,this.initialize()}return _createClass(a,[{key:"initialize",value:function initialize(){this.texture=new createTexture(this.sketch),this.sphereGeometry=new THREE.SphereGeometry(this.sphereSize,64,64),this.sphereMaterial=new THREE.ShaderMaterial({side:THREE.DoubleSide,uniforms:{uTime:{type:"f",value:0},uImage:{type:"t",value:this.texture.getTexture()}},vertexShader:vertexShader,fragmentShader:fragmentShader}),this.sphereMesh=new THREE.Mesh(this.sphereGeometry,this.sphereMaterial),this.sphereMesh.position.y=this.sphereSize,this.sphereMesh.rotation.z=-90*Math.PI/180,this.sketch.scene.add(this.sphereMesh),this.length=3*Math.max(this.sketch.width,this.sketch.height),this.groundGeometry=new THREE.PlaneGeometry(this.length,this.length,128),this.groundMaterial=new THREE.ShaderMaterial({side:THREE.DoubleSide,uniforms:{uTime:{type:"f",value:0},uImage:{type:"t",value:this.texture.getTexture()}},vertexShader:vertexShader,fragmentShader:fragmentShader}),this.groundMesh=new THREE.Mesh(this.groundGeometry,this.groundMaterial),this.groundMesh.rotation.x=-90*Math.PI/180,this.groundMesh.rotation.z=90*Math.PI/180,this.sketch.scene.add(this.groundMesh)}},{key:"render",value:function render(a){this.sphereMesh.material.uniforms.uTime.value=a,this.groundMesh.material.uniforms.uTime.value=a}}]),a}(),createTexture=function(){function a(b){_classCallCheck(this,a),this.sketch=b,this.initialize()}return _createClass(a,[{key:"initialize",value:function initialize(){this.canvas=document.createElement("canvas"),this.ctx=this.canvas.getContext("2d"),this.length=256,this.fontSize=256,this.canvas.width=this.length,this.canvas.height=this.length,this.drawTexture()}},{key:"drawTexture",value:function drawTexture(){this.ctx.font=this.fontSize+"px \"Impact\"";var a=this.ctx.measureText("NOISY");return a.width>.9*this.length?(this.fontSize--,this.drawTexture()):void(this.ctx.clearRect(0,0,this.length,this.length),this.ctx.lineWidth=20,this.ctx.strokeStyle="white",this.ctx.strokeRect(0,0,this.length,this.length),this.ctx.fillStyle="white",this.ctx.textAlign="center",this.ctx.textBaseline="middle",this.ctx.fillText("NOISY",this.length/2,this.length/2))}},{key:"getTexture",value:function getTexture(){var a=new THREE.CanvasTexture(this.canvas);return a.needsUpdate=!0,a}}]),a}();(function(){window.addEventListener("load",function(){new FullScreen,new Loading("loading","loaded"),new Sketch})})();