"use strict";function _classCallCheck(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}function _defineProperties(a,b){for(var c,d=0;d<b.length;d++)c=b[d],c.enumerable=c.enumerable||!1,c.configurable=!0,"value"in c&&(c.writable=!0),Object.defineProperty(a,c.key,c)}function _createClass(a,b,c){return b&&_defineProperties(a.prototype,b),c&&_defineProperties(a,c),Object.defineProperty(a,"prototype",{writable:!1}),a}var vertexRainShader="\nattribute float number;\n\nuniform float uTime;\nuniform vec2 uResolution;\n\nfloat PI = 3.14159265359;\n\nvoid main(){\n  vec3 pos = position;\n  \n  pos.x += cos(pos.x + uTime * number) * 10.0;\n  pos.y -= tan(pos.y + uTime * 5.0) * 100.0;\n  pos.z += sin(pos.z + uTime * number) * 10.0;\n  \n  vec4 mvPosition = modelViewMatrix * vec4(pos, 1.0);\n  \n  gl_PointSize = 40.0 * (80.0 / - mvPosition.z);\n  gl_Position = projectionMatrix * mvPosition;\n}\n",fragmentRainShader="\nvoid main () {\n  float f = length(gl_PointCoord - vec2(0.5, 0.5));\n  if ( f > 0.1 ) discard;\n  \n  gl_FragColor = vec4(0.5, 0.8, 1.0, 0.2);\n}\n",vertexShader="\nattribute vec2 reference;\n\nuniform float uTime;\n\nvarying vec2 vUv;\n\nfloat PI = 3.14159265359;\n\nvoid main(){\n  vUv = reference;\n  \n  vec3 pos = position;\n  \n  //pos.x = cos(pos.x * 0.1 + uTime) * 10.0 + pos.x;\n  //pos.y = sin(pos.y * 0.1 + uTime) * 10.0 + pos.y;\n  pos.z = sin(pos.x * 0.01 + uTime * 0.5) * 30.0 + pos.z;\n  pos.x = cos(pos.y * 0.01 + uTime * 0.5) * 30.0 + pos.x;\n  pos.y = sin(pos.z * 0.01 + uTime * 0.5) * 30.0 + pos.y;\n\n  vec4 mvPosition = modelViewMatrix * vec4(pos, 1.0);\n  \n  gl_PointSize = 20.0 * (40.0 / - mvPosition.z);\n  gl_Position = projectionMatrix * mvPosition;\n}\n\n",fragmentShader="\nuniform float uTime;\nuniform sampler2D textureState;\n\nvarying vec2 vUv;\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d ) {\n  return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid main () {\n  vec4 color = texture2D(textureState, vUv);\n  \n\n  vec3 col =\n    pal(\n      distance(vUv, vec2(0.5)) - uTime * 0.1,\n      vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.3,0.20,0.20)\n    );\n  \n  gl_FragColor = vec4(col, color.w / 255.0);\n}\n\n",stateSimulation="\nvoid main () {\n  vec2 uv = gl_FragCoord.xy / resolution.xy;\n  \n  vec4 tmpState = texture2D(textureState, uv);\n  vec4 state = tmpState;\n  \n  vec2 above  = gl_FragCoord.xy + vec2( 0.0,  1.0);\n  vec2 below  = gl_FragCoord.xy + vec2( 0.0, -1.0);\n  vec2 right  = gl_FragCoord.xy + vec2( 1.0,  0.0);\n  vec2 left   = gl_FragCoord.xy + vec2(-1.0,  0.0);\n  \n  vec2 aRight = gl_FragCoord.xy + vec2( 1.0,  1.0);\n  vec2 aLeft  = gl_FragCoord.xy + vec2(-1.0,  1.0);\n  vec2 bRight = gl_FragCoord.xy + vec2( 1.0, -1.0);\n  vec2 bLeft  = gl_FragCoord.xy + vec2(-1.0, -1.0);\n  \n  if (above.y > floor(resolution.y) || aRight.y > floor(resolution.y) || aLeft.y > floor(resolution.y)) {\n    above.y  = 0.0;\n    aRight.y = 0.0;\n    aLeft.y  = 0.0;\n  }\n  \n  if (below.y < 0.0 || bRight.y < 0.0 || bLeft.y < 0.0) {\n    below.y  = floor(resolution.y);\n    bRight.y = floor(resolution.y);\n    bLeft.y  = floor(resolution.y);\n  }\n  \n  if (right.x > floor(resolution.x) || aRight.x > floor(resolution.x) || bRight.x > floor(resolution.x)) {\n    right.x  = 0.0;\n    aRight.x = 0.0;\n    bRight.x = 0.0;\n  }\n  \n  if (left.x < 0.0 || aLeft.x < 0.0 || bLeft.x < 0.0) {\n    left.x  = floor(resolution.x);\n    aLeft.x = floor(resolution.x);\n    bLeft.x = floor(resolution.x);\n  }\n  \n  vec2 uAbove = above / resolution.xy;\n  vec2 uBelow = below / resolution.xy;\n  vec2 uRight = right / resolution.xy;\n  vec2 uLeft  = left  / resolution.xy;\n  \n  vec2 uAboveRight = aRight / resolution.xy;\n  vec2 uAboveLeft  = aLeft  / resolution.xy;\n  vec2 uBelowRight = bRight / resolution.xy;\n  vec2 uBelowLeft  = bLeft  / resolution.xy;\n  \n  float a = texture2D(textureState, uAbove).w;\n  float b = texture2D(textureState, uBelow).w;\n  float l = texture2D(textureState, uRight).w;\n  float r = texture2D(textureState, uLeft).w;\n  \n  float ar = texture2D(textureState, uAboveRight).w;\n  float al = texture2D(textureState, uAboveLeft).w;\n  float br = texture2D(textureState, uBelowRight).w;\n  float bl = texture2D(textureState, uBelowLeft).w;\n  \n  int total = int(a + b + l + r + ar + al + br + bl);\n  \n  int average = total / 8;\n  \n  int nextStateNumber;\n  \n  if (average == 255) {\n    nextStateNumber = 0;\n  } else if (average == 0) {\n    nextStateNumber = 255;\n  } else {\n    nextStateNumber = int(state.w) + average;\n    if (state.z > 0.0) {\n      nextStateNumber = nextStateNumber - int(state.z);\n    }\n    if (nextStateNumber > 255) {\n      nextStateNumber = 255;\n    } else if (nextStateNumber < 0) {\n      nextStateNumber = 0;\n    }\n  }\n  \n  state.z = state.w;\n  state.w = float(nextStateNumber);\n  \n  gl_FragColor = state;\n}\n",Mouse=function(){function a(b){_classCallCheck(this,a),this.sketch=b,this.initialize()}return _createClass(a,[{key:"initialize",value:function initialize(){this.delta=0,this.mouse=new THREE.Vector3,this.setupEvents()}},{key:"setupEvents",value:function setupEvents(){window.addEventListener("scroll",this.onScroll.bind(this),!1),window.addEventListener("mousemove",this.onMousemove.bind(this),!1),window.addEventListener("touchmove",this.onTouchmove.bind(this),!1)}},{key:"onScroll",value:function onScroll(){var a=window.pageYOffset,b=document.body.scrollHeight-window.innerHeight;this.delta=a/b}},{key:"onMousemove",value:function onMousemove(a){this.mouse.x=2*(a.clientX/window.innerWidth)-1,this.mouse.y=2*-(a.clientY/window.innerHeight)+1,this.mouse.z=0}},{key:"onTouchmove",value:function onTouchmove(a){var b=a.targetTouches[0];this.mouse.x=2*(b.pageX/window.innerWidth)-1,this.mouse.y=2*-(b.pageY/window.innerHeight)+1,this.mouse.z=0}}]),a}(),Sketch=function(){function a(){_classCallCheck(this,a),this.createCanvas(),this.setupEvents(),this.time=new THREE.Clock(!0),this.mouse=new Mouse(this),this.initialize()}return _createClass(a,[{key:"createCanvas",value:function createCanvas(){this.renderer=new THREE.WebGLRenderer({antialias:!0,alpha:!0}),document.body.appendChild(this.renderer.domElement)}},{key:"setupEvents",value:function setupEvents(){window.addEventListener("resize",this.onResize.bind(this),!1)}},{key:"onResize",value:function onResize(){this.preWidth===window.innerWidth&&480>window.innerWidth||this.initialize()}},{key:"initialize",value:function initialize(){this.animationId&&cancelAnimationFrame(this.animationId),this.preWidth=this.width=Math.ceil(window.innerWidth),this.height=Math.ceil(window.innerHeight),this.scene=new THREE.Scene,this.setupCanvas(),this.setupCamera(),this.setupShape(),this.draw()}},{key:"setupCanvas",value:function setupCanvas(){this.renderer.setSize(this.width,this.height),this.renderer.setPixelRatio(.75),this.renderer.setClearColor(467766,1),this.renderer.domElement.style.position="fixed",this.renderer.domElement.style.top="0",this.renderer.domElement.style.left="0",this.renderer.domElement.style.width="100%",this.renderer.domElement.style.height="100%",this.renderer.domElement.style.zIndex="-1",this.renderer.domElement.style.outline="none"}},{key:"setupCamera",value:function setupCamera(){var a=35*(Math.PI/180);this.dist=this.height/2/Math.tan(a),this.camera=new THREE.PerspectiveCamera(70,this.width/this.height,.01,10*this.dist),this.cameraV=new THREE.Vector3,this.cameraP=new THREE.Vector3(0,0,this.dist),this.camera.position.set(this.cameraP),this.camera.lookAt(new THREE.Vector3),this.scene.add(this.camera)}},{key:"updateCamera",value:function updateCamera(){this.cameraV.subVectors(this.mouse.mouse,this.cameraP).multiplyScalar(.03),this.cameraP.add(this.cameraV),this.camera.position.set(this.cameraP.x*this.dist,Math.max(this.cameraP.y*this.dist,100),.5*this.dist),this.camera.lookAt(new THREE.Vector3)}},{key:"setupLight",value:function setupLight(){this.directionalLight=new THREE.DirectionalLight(16777215),this.scene.add(this.directionalLight),this.spotLight=new THREE.SpotLight(16777215),this.spotLight.position.set(0,0,this.dist),this.spotLightV=new THREE.Vector3,this.spotLightP=new THREE.Vector3,this.scene.add(this.spotLight)}},{key:"setupShape",value:function setupShape(){this.shapes=[];var a=new Shape(this);this.shapes.push(a)}},{key:"draw",value:function draw(){for(var a=this.time.getElapsedTime(),b=0;b<this.shapes.length;b++)this.shapes[b].update(a);this.updateCamera(a),this.renderer.render(this.scene,this.camera),this.animationId=requestAnimationFrame(this.draw.bind(this))}}]),a}(),Shape=function(){function a(b){_classCallCheck(this,a),this.sketch=b,this.setupSizes(),this.init()}return _createClass(a,[{key:"setupSizes",value:function setupSizes(){this.groundNum=null,this.rainNum=null,768>this.sketch.width&&(this.groundNum=512,this.rainNum=1e4),768<=this.sketch.width&&(this.groundNum=768,this.rainNum=2e4)}},{key:"init",value:function init(){this.initGPGPU(),this.geometry=new THREE.BufferGeometry,this.material=new THREE.ShaderMaterial({side:THREE.DoubleSide,uniforms:{uTime:{type:"f",value:0},textureState:{type:"v4",value:null}},blending:THREE.AdditiveBlending,transparent:!0,vertexShader:vertexShader,fragmentShader:fragmentShader});for(var a=new Float32Array(3*(this.groundNum*this.groundNum)),b=0;b<this.groundNum;b++)for(var e,f=0;f<this.groundNum;f++)e=b*this.groundNum+f,a.set([f-this.groundNum/2,b-this.groundNum/2,0],3*e);for(var c=new Float32Array(2*(this.groundNum*this.groundNum)),d=0;d<this.groundNum;d++)for(var g,h=0;h<this.groundNum;h++)g=d*this.groundNum+h,c.set([h/this.groundNum,d/this.groundNum],2*g);this.geometry.setAttribute("position",new THREE.BufferAttribute(a,3)),this.geometry.setAttribute("reference",new THREE.BufferAttribute(c,2)),this.mesh=new THREE.Points(this.geometry,this.material),this.mesh.rotation.x=-90*Math.PI/180,this.mesh.scale.set(2,2,2),this.sketch.scene.add(this.mesh),this.rainGeometry=new THREE.BufferGeometry,this.vertices=new Float32Array(3*this.rainNum),this.numbers=new Float32Array(this.rainNum);for(var j=0;j<3*this.rainNum;j++)this.vertices[3*j+0]=2*(Math.random()*this.groundNum)-this.groundNum,this.vertices[3*j+1]=2*(Math.random()*this.groundNum)-this.groundNum,this.vertices[3*j+2]=2*(Math.random()*this.groundNum)-this.groundNum;for(var i=0;i<this.rainNum;i++)this.numbers[i]=Math.random();this.rainGeometry.setAttribute("position",new THREE.BufferAttribute(this.vertices,3)),this.rainGeometry.setAttribute("number",new THREE.BufferAttribute(this.numbers,1)),this.rainMaterial=new THREE.ShaderMaterial({side:THREE.DoubleSide,uniforms:{uTime:{type:"f",value:0},uResolution:{type:"v2",value:new THREE.Vector2(this.groundNum,this.groundNum)}},blending:THREE.AdditiveBlending,transparent:!0,vertexShader:vertexRainShader,fragmentShader:fragmentRainShader}),this.rainPoint=new THREE.Points(this.rainGeometry,this.rainMaterial),this.sketch.scene.add(this.rainPoint)}},{key:"initGPGPU",value:function initGPGPU(){this.gpuCompute=new GPUComputationRenderer(THREE,this.sketch.width,this.sketch.height,this.sketch.renderer).setDataType(THREE.HalfFloatType),this.statesTextureState=this.gpuCompute.createTexture(),this.statesTextureState.needsUpdate=!0,this.setStates(this.statesTextureState),this.stateVariable=this.gpuCompute.addVariable("textureState",stateSimulation,this.statesTextureState),this.gpuCompute.setVariableDependencies(this.stateVariable,[this.stateVariable]),this.gpuCompute.init()}},{key:"setStates",value:function setStates(a){for(var b=a.image.data,c=0;c<this.sketch.height;c++)for(var f=0;f<this.sketch.width;f++){var d=c*this.sketch.width+f,e=Math.floor(256*Math.random());b[4*d+0]=0,b[4*d+1]=0,b[4*d+2]=e,b[4*d+3]=e}}},{key:"update",value:function update(a){this.gpuCompute.compute(),this.material.uniforms.textureState.value=this.gpuCompute.getCurrentRenderTarget(this.stateVariable).texture,this.mesh.material.uniforms.uTime.value=2*a,this.rainPoint.material.uniforms.uTime.value=a}}]),a}();(function(){window.addEventListener("load",function(){new Loading("loading","loaded"),new FullScreen,new Sketch})})();