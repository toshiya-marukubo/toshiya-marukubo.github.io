"use strict";function _classCallCheck(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}function _defineProperties(a,b){for(var c,d=0;d<b.length;d++)c=b[d],c.enumerable=c.enumerable||!1,c.configurable=!0,"value"in c&&(c.writable=!0),Object.defineProperty(a,c.key,c)}function _createClass(a,b,c){return b&&_defineProperties(a.prototype,b),c&&_defineProperties(a,c),Object.defineProperty(a,"prototype",{writable:!1}),a}var vertexShader="\nattribute vec2 reference;\n\nuniform float uTime;\nuniform sampler2D texturePosition;\n\nvarying vec3 vPosition;\n\nfloat PI = 3.14159265359;\n\nvoid main(){\n  vec3 pos = texture2D(texturePosition, reference).xyz;\n  vec4 mvPosition = modelViewMatrix * vec4(pos, 1.0);\n  \n  vPosition = pos;\n  \n  gl_PointSize = 30.0 * (60.0 / - mvPosition.z);\n  gl_Position = projectionMatrix * mvPosition;\n}\n\n",fragmentShader="\nuniform float uTime;\nvarying vec3 vPosition;\n\n//\tSimplex 3D Noise \n//\tby Ian McEwan, Ashima Arts\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\n\nfloat snoise(vec3 v){ \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n  // First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n  // Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  // x0 = x0 - 0. + 0.0 * C \n  vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n  vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n  vec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n  // Permutations\n  i = mod(i, 289.0 ); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n  // Gradients\n  // ( N*N points uniformly over a square, mapped onto an octahedron.)\n  float n_ = 1.0/7.0; // N=7\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n  //Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n  // Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n}\n\nconst float scale = 0.001;\n\nvoid main () {\n  /**\n   * square to circle\n   * Referred to\n   * https://qiita.com/uma6661/items/20accc9b5fb9845fc73a\n   * Thank you so much.\n   */\n  float f = length(gl_PointCoord - vec2(0.5, 0.5));\n  if (f > 0.1) discard;\n  \n  vec3 color;\n  color.r = abs(snoise(vec3(vPosition.x * scale, vPosition.y * scale, uTime * 0.1)));\n  color.g = abs(snoise(vec3(vPosition.x * scale, vPosition.y * scale, uTime * 0.2)));\n  color.b = abs(snoise(vec3(vPosition.x * scale, vPosition.y * scale, uTime * 0.3)));\n  \n  gl_FragColor = vec4(color, 1.0);\n  \n}\n\n",positionSimulation="\nuniform float uTime;\n\n//\tSimplex 4D Noise \n//\tby Ian McEwan, Ashima Arts\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nfloat permute(float x){return floor(mod(((x*34.0)+1.0)*x, 289.0));}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\nfloat taylorInvSqrt(float r){return 1.79284291400159 - 0.85373472095314 * r;}\n\nvec4 grad4(float j, vec4 ip){\n  const vec4 ones = vec4(1.0, 1.0, 1.0, -1.0);\n  vec4 p,s;\n\n  p.xyz = floor( fract (vec3(j) * ip.xyz) * 7.0) * ip.z - 1.0;\n  p.w = 1.5 - dot(abs(p.xyz), ones.xyz);\n  s = vec4(lessThan(p, vec4(0.0)));\n  p.xyz = p.xyz + (s.xyz*2.0 - 1.0) * s.www; \n\n  return p;\n}\n\nfloat snoise(vec4 v){\n  const vec2  C = vec2( 0.138196601125010504,  // (5 - sqrt(5))/20  G4\n                        0.309016994374947451); // (sqrt(5) - 1)/4   F4\n  // First corner\n  vec4 i  = floor(v + dot(v, C.yyyy) );\n  vec4 x0 = v -   i + dot(i, C.xxxx);\n\n  // Other corners\n  // Rank sorting originally contributed by Bill Licea-Kane, AMD (formerly ATI)\n  vec4 i0;\n  vec3 isX = step( x0.yzw, x0.xxx );\n  vec3 isYZ = step( x0.zww, x0.yyz );\n  // i0.x = dot( isX, vec3( 1.0 ) );\n  i0.x = isX.x + isX.y + isX.z;\n  i0.yzw = 1.0 - isX;\n\n  // i0.y += dot( isYZ.xy, vec2( 1.0 ) );\n  i0.y += isYZ.x + isYZ.y;\n  i0.zw += 1.0 - isYZ.xy;\n\n  i0.z += isYZ.z;\n  i0.w += 1.0 - isYZ.z;\n\n  // i0 now contains the unique values 0,1,2,3 in each channel\n  vec4 i3 = clamp( i0, 0.0, 1.0 );\n  vec4 i2 = clamp( i0-1.0, 0.0, 1.0 );\n  vec4 i1 = clamp( i0-2.0, 0.0, 1.0 );\n\n  // x0 = x0 - 0.0 + 0.0 * C \n  vec4 x1 = x0 - i1 + 1.0 * C.xxxx;\n  vec4 x2 = x0 - i2 + 2.0 * C.xxxx;\n  vec4 x3 = x0 - i3 + 3.0 * C.xxxx;\n  vec4 x4 = x0 - 1.0 + 4.0 * C.xxxx;\n\n  // Permutations\n  i = mod(i, 289.0); \n  float j0 = permute( permute( permute( permute(i.w) + i.z) + i.y) + i.x);\n  vec4 j1 = permute( permute( permute( permute (\n             i.w + vec4(i1.w, i2.w, i3.w, 1.0 ))\n           + i.z + vec4(i1.z, i2.z, i3.z, 1.0 ))\n           + i.y + vec4(i1.y, i2.y, i3.y, 1.0 ))\n           + i.x + vec4(i1.x, i2.x, i3.x, 1.0 ));\n  // Gradients\n  // ( 7*7*6 points uniformly over a cube, mapped onto a 4-octahedron.)\n  // 7*7*6 = 294, which is close to the ring size 17*17 = 289.\n  vec4 ip = vec4(1.0/294.0, 1.0/49.0, 1.0/7.0, 0.0);\n  vec4 p0 = grad4(j0,   ip);\n  vec4 p1 = grad4(j1.x, ip);\n  vec4 p2 = grad4(j1.y, ip);\n  vec4 p3 = grad4(j1.z, ip);\n  vec4 p4 = grad4(j1.w, ip);\n\n  // Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n  p4 *= taylorInvSqrt(dot(p4,p4));\n\n  // Mix contributions from the five corners\n  vec3 m0 = max(0.6 - vec3(dot(x0,x0), dot(x1,x1), dot(x2,x2)), 0.0);\n  vec2 m1 = max(0.6 - vec2(dot(x3,x3), dot(x4,x4)            ), 0.0);\n  m0 = m0 * m0;\n  m1 = m1 * m1;\n  return 49.0 * ( dot(m0*m0, vec3( dot( p0, x0 ), dot( p1, x1 ), dot( p2, x2 )))\n               + dot(m1*m1, vec2( dot( p3, x3 ), dot( p4, x4 ) ) ) ) ;\n}\n\nconst float scale = 0.01;\n\nvoid main () {\n  vec2 uv = gl_FragCoord.xy / resolution.xy;\n  vec4 tmpPos = texture2D(texturePosition, uv);\n  vec4 tmpVel = texture2D(textureVelocity, uv);\n  vec3 pos = tmpPos.xyz;\n  vec3 vel = tmpVel.xyz * 0.1;\n  float noisy = snoise(vec4(pos.x * scale, pos.y * scale, pos.z * scale, uTime));\n  \n  pos.x += noisy + vel.z;\n  pos.y += noisy + vel.x;\n  pos.z += noisy + vel.y;\n  pos.x += 1.0;\n  \n  if (pos.x > resolution.x / 2.0) pos.x = 0.0 - resolution.x / 2.0;\n  \n  gl_FragColor = vec4(pos, 1.0);\n}\n",velocitySimulation="\nvoid main() {\n  vec2 uv = gl_FragCoord.xy / resolution.xy;\n  //float idParticle = uv.y * resolution.x + uv.x;\n  vec4 tmpVel = texture2D( textureVelocity, uv );\n  vec3 vel = tmpVel.xyz;\n\n  gl_FragColor = vec4(vel.xyz, 1.0);\n}\n",Mouse=function(){function a(b){_classCallCheck(this,a),this.sketch=b,this.initialize()}return _createClass(a,[{key:"initialize",value:function initialize(){this.delta=0,this.mouse=new THREE.Vector3,this.setupEvents()}},{key:"setupEvents",value:function setupEvents(){window.addEventListener("scroll",this.onScroll.bind(this),!1),window.addEventListener("mousemove",this.onMousemove.bind(this),!1),window.addEventListener("touchmove",this.onTouchmove.bind(this),!1)}},{key:"onScroll",value:function onScroll(){var a=window.pageYOffset,b=document.body.scrollHeight-window.innerHeight;this.delta=a/b}},{key:"onMousemove",value:function onMousemove(a){this.mouse.x=2*(a.clientX/window.innerWidth)-1,this.mouse.y=2*-(a.clientY/window.innerHeight)+1,this.mouse.z=0}},{key:"onTouchmove",value:function onTouchmove(a){var b=a.targetTouches[0];this.mouse.x=2*(b.pageX/window.innerWidth)-1,this.mouse.y=2*-(b.pageY/window.innerHeight)+1,this.mouse.z=0}}]),a}(),Sketch=function(){function a(){_classCallCheck(this,a),this.createCanvas(),this.setupEvents(),this.time=new THREE.Clock(!0),this.mouse=new Mouse(this),this.initialize()}return _createClass(a,[{key:"createCanvas",value:function createCanvas(){this.renderer=new THREE.WebGLRenderer({antialias:!0,alpha:!0}),document.body.appendChild(this.renderer.domElement)}},{key:"setupEvents",value:function setupEvents(){window.addEventListener("resize",this.onResize.bind(this),!1)}},{key:"onResize",value:function onResize(){this.preWidth===window.innerWidth&&480>window.innerWidth||this.initialize()}},{key:"initialize",value:function initialize(){this.animationId&&cancelAnimationFrame(this.animationId),this.preWidth=this.width=Math.ceil(window.innerWidth),this.height=Math.ceil(window.innerHeight),this.scene=new THREE.Scene,this.setupCanvas(),this.setupCamera(),this.setupShape(),this.draw()}},{key:"setupCanvas",value:function setupCanvas(){this.renderer.setSize(this.width,this.height),this.renderer.setPixelRatio(1),this.renderer.setClearColor(0,1),this.renderer.domElement.style.position="fixed",this.renderer.domElement.style.top="0",this.renderer.domElement.style.left="0",this.renderer.domElement.style.width="100%",this.renderer.domElement.style.height="100%",this.renderer.domElement.style.zIndex="-1",this.renderer.domElement.style.outline="none"}},{key:"setupCamera",value:function setupCamera(){var a=35*(Math.PI/180);this.dist=this.height/2/Math.tan(a),this.camera=new THREE.PerspectiveCamera(70,this.width/this.height,.01,10*this.dist),this.cameraV=new THREE.Vector3,this.cameraP=new THREE.Vector3(0,.01*this.dist,this.dist/2),this.camera.position.set(this.cemaraP),this.camera.lookAt(new THREE.Vector3),this.scene.add(this.camera)}},{key:"updateCamera",value:function updateCamera(){this.cameraV.subVectors(this.mouse.mouse,this.cameraP).multiplyScalar(.03),this.cameraP.add(this.cameraV),this.camera.position.set(this.cameraP.x*this.dist/2,this.cameraP.y*this.dist/2,this.dist/2),this.camera.lookAt(new THREE.Vector3)}},{key:"setupLight",value:function setupLight(){this.directionalLight=new THREE.DirectionalLight(16777215),this.scene.add(this.directionalLight),this.spotLight=new THREE.SpotLight(16777215),this.spotLight.position.set(0,0,this.dist),this.spotLightV=new THREE.Vector3,this.spotLightP=new THREE.Vector3,this.scene.add(this.spotLight)}},{key:"setupShape",value:function setupShape(){this.shapes=[];var a=new Shape(this);this.shapes.push(a)}},{key:"draw",value:function draw(){for(var a=this.time.getElapsedTime(),b=0;b<this.shapes.length;b++)this.shapes[b].update(a);this.updateCamera(a),this.renderer.render(this.scene,this.camera),this.animationId=requestAnimationFrame(this.draw.bind(this))}}]),a}(),Shape=function(){function a(b){_classCallCheck(this,a),this.sketch=b,this.setupSizes(),this.init()}return _createClass(a,[{key:"setupSizes",value:function setupSizes(){this.num=null,768>this.sketch.width&&(this.num=256),768<=this.sketch.width&&(this.num=512)}},{key:"init",value:function init(){this.initGPGPU(),this.geometry=new THREE.BufferGeometry,this.material=new THREE.ShaderMaterial({side:THREE.DoubleSide,uniforms:{uTime:{type:"f",tvalue:0},texturePosition:{type:"v4",value:null},textureVelocity:{type:"v4",value:null}},blending:THREE.AdditiveBlending,transparent:!0,vertexShader:vertexShader,fragmentShader:fragmentShader});for(var a=new Float32Array(3*(this.num*this.num)),b=new Float32Array(2*(this.num*this.num)),c=0;c<this.num*this.num;c++)a.set([0,0,0],3*c);for(var d=0;d<this.num;d++)for(var e,f=0;f<this.num;f++)e=d*this.num+f,b.set([f/this.num,d/this.num],2*e);this.geometry.setAttribute("position",new THREE.BufferAttribute(a,3)),this.geometry.setAttribute("reference",new THREE.BufferAttribute(b,2)),this.mesh=new THREE.Points(this.geometry,this.material),this.sketch.scene.add(this.mesh)}},{key:"initGPGPU",value:function initGPGPU(){this.gpuCompute=new GPUComputationRenderer(THREE,this.sketch.width,this.sketch.height,this.sketch.renderer).setDataType(THREE.HalfFloatType),this.dataTexturePosition=this.gpuCompute.createTexture(),this.dataTextureVelocity=this.gpuCompute.createTexture(),this.dataTexturePosition.needsUpdate=!0,this.dataTextureVelocity.needsUpdate=!0,this.setPositions(this.dataTexturePosition),this.setVelocities(this.dataTextureVelocity),this.positionVariable=this.gpuCompute.addVariable("texturePosition",positionSimulation,this.dataTexturePosition),this.velocityVariable=this.gpuCompute.addVariable("textureVelocity",velocitySimulation,this.dataTextureVelocity),this.gpuCompute.setVariableDependencies(this.velocityVariable,[this.positionVariable,this.velocityVariable]),this.gpuCompute.setVariableDependencies(this.positionVariable,[this.positionVariable,this.velocityVariable]),this.positionVariable.material.uniforms.uTime={value:0},this.gpuCompute.init()}},{key:"setVelocities",value:function setVelocities(a){for(var b=a.image.data,c=0;c<b.length;c+=4)b[c+0]=Math.random(),b[c+1]=Math.random(),b[c+2]=Math.random(),b[c+3]=0}},{key:"setPositions",value:function setPositions(a){for(var b=a.image.data,c=0;c<b.length;c+=4)b[c+0]=Math.random()*this.sketch.width-this.sketch.width/2,b[c+1]=Math.random()*this.sketch.height-this.sketch.height/2,b[c+2]=Math.random()*this.sketch.dist-this.sketch.dist/2,b[c+3]=0}},{key:"update",value:function update(a){this.gpuCompute.compute(),this.material.uniforms.texturePosition.value=this.gpuCompute.getCurrentRenderTarget(this.positionVariable).texture,this.material.uniforms.textureVelocity.value=this.gpuCompute.getCurrentRenderTarget(this.velocityVariable).texture,this.mesh.material.uniforms.uTime.value=a}}]),a}();(function(){window.addEventListener("load",function(){new Loading("loading","loaded"),new FullScreen,new Sketch})})();